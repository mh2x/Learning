@page "/timer"
@using System.Timers
@implements IDisposable
@rendermode InteractiveServer

@* https://swimburger.net/blog/dotnet/pushing-ui-changes-from-blazor-server-to-browser-on-server-raised-events *@

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<DateTimeLabel/>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    private System.Timers.Timer myTimer;

    private void IncrementCount()
    {
        currentCount++;
        Console.WriteLine($"Count incremented: {currentCount}");
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            myTimer = new ();
            myTimer.Interval = 1000;
            myTimer.Elapsed += OnTimerInterval;
            myTimer.AutoReset = true;
            // Start the timer
            myTimer.Enabled = true;
        }
        base.OnAfterRender(firstRender);
    }

    private void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        IncrementCount();
        //NOTE: this is important!
        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        // During prerender, this component is rendered without calling OnAfterRender and then immediately disposed
        // this mean timer will be null so we have to check for null or use the Null-conditional operator ?
        myTimer?.Dispose();
    }
}